1. Run npm packages installations in root project folder:

	npm i redux react-redux redux-thunk redux-devtools-extension
	
	npm run dev
	
2. Create a store.

	.\django_fin_app\portfolio_management\src\store.js

	import {createStore, applyMiddleware} from 'redux'
	import { composeWithDevTools } from 'redux-devtools-extension'
	import thunk from 'redux-thunk'
	import rootReducer from './reducers'

	const initialState = {}

	const middleware = [thunk]

	const store = createStore(
		rootReducer,
		initialState,
		composeWithDevTools(applyMiddleware(...middleware))
	)

	export default store
	
3. Create an index.js in reducers folder (create reducers folder).

	.\django_fin_app\portfolio_management\src\reducers\index.js
	
	import { combineReducers } from 'redux'
	export default combineReducers({})

4. In main component App, make following changes.

	.\django_fin_app\portfolio_management\src\components\App.js

	import React, { Component, Fragment } from 'react'
	import ReactDOM from 'react-dom'

	import { Provider } from 'react-redux'						// changes
	import store from '../store'								// changes

	class App extends Component {
		render() {
			return (
				<Provider store={store}>						// changes
					<Fragment>									// changes
						<h1>This is react.</h1>
					</Fragment>									// changes
				</Provider>										// changes
			)
		}
	}

	ReactDOM.render(<App />, document.getElementById('app'))
	
5. In reducers\index make following changes.

	.\django_fin_app\portfolio_management\src\reducers\index.js
	
	import { combineReducers } from 'redux'
	import watchlists from './watchlists'						// changes

	export default combineReducers({
		watchlists												// changes
	})
	
6. Create a reducers/watchlists.js reducer file.

	.\django_fin_app\portfolio_management\src\reducers\watchlists.js
	
	// Reducer is nothing but a function which evaluates an action and send down certain state 
	// depending on what that action does.

	import { GET_WATCHLISTS } from '../actions/types.js'

	const initialState = {
		watchlists: []
	}

	export default function(state = initialState, action) {
		switch(action.type) {
			case GET_WATCHLISTS:
				return {
					...state,
					watchlists: action.payload
				}
			default:
				return state
		}
	}
	
7. Create actions/types.js file.

	.\django_fin_app\portfolio_management\src\actions\types.js

	export const GET_WATCHLISTS = "GET_WATCHLISTS"
	
8. Install axios in root project directory.

	npm i axios

9. Create actions/watchlists.js file for actions.

	.\django_fin_app\portfolio_management\src\actions\watchlists.js
	
	import axios from 'axios'

	import GET_WATCHLISTS from './types.js'

	export const getWatchlists = () => dispatch => {
		axios.get('./api/watchlists/')
			.then(res => {
				dispatch({
					type: GET_WATCHLISTS,
					payload: res.data
				})
			})
			.catch(err => console.log(err))
	}

10. Create watchlists/Watchlist.js component and import it to the App.js.

	.\django_fin_app\portfolio_management\src\components\watchlists\Watchlists.js

	import React, {Component, Fragment} from 'react'
	import {connect} from 'react-redux'
	import PropTypes from 'prop-types'
	import { getWatchlists } from '../../actions/watchlists'

	export class Watchlists extends Component {
		static propTypes = {
			watchlists: PropTypes.array.isRequired
		}

		componentDidMount() {
			this.props.getWatchlists()
		}

		render() {
			return (
				<Fragment>
					<h1>Watchlists</h1>
					<table className="table table-striped">
						<thead>
							<tr>
								<th>Name</th>
								<th>Start Date</th>
								<th>End Date</th>
								<th>Amount</th>
								<th></th>
							</tr>
						</thead>
						<tbody>
							{ this.props.watchlists.map( watchlist => (
								<tr key={watchlist.id}>
									<td>{watchlist.watchlist_name}</td>
									<td>{watchlist.start_date}</td>
									<td>{watchlist.end_date}</td>
									<td>{watchlist.investment_amount}</td>
									<td><button className="btn btn-danger btn-sm">Delete</button></td>
								</tr>
							))}
						</tbody>
					</table>
				</Fragment>
			)
		}
	}

	const mapStateToProps = state => ({
		// any_name: state.(reducer_name_from_root_reducer).(part_of_state)
		watchlists: state.watchlists.watchlists
	})

	export default connect(mapStateToProps, { getWatchlists })(Watchlists)
	
	=======================================================================================
	
	.\django_fin_app\portfolio_management\src\components\App.js
	
	import React, { Component, Fragment } from 'react'
	import ReactDOM from 'react-dom'

	import Watchlists from './watchlists/Watchlists'						// changes

	import { Provider } from 'react-redux'
	import store from '../store'

	class App extends Component {
		render() {
			return (
				<Provider store={store}>
					<Fragment>
						<Watchlists></Watchlists>							// changes
					</Fragment>
				</Provider>
			)
		}
	}

	ReactDOM.render(<App />, document.getElementById('app'))
	
11. To add delete watchlist feature.

	.\django_fin_app\portfolio_management\src\actions\types.js

	export const GET_WATCHLISTS = "GET_WATCHLISTS"

	export const DELETE_WATCHLIST = "DELETE_WATCHLIST"						// changes
	
	===========================================================================================
	.\django_fin_app\portfolio_management\src\actions\watchlists.js
	
	import axios from 'axios'

	import { GET_WATCHLISTS,DELETE_WATCHLIST } from './types.js'			// changes

	export const getWatchlists = () => dispatch => {
		axios.get('./api/watchlists/')
			.then(res => {
				dispatch({
					type: GET_WATCHLISTS,
					payload: res.data
				})
			})
			.catch(err => console.log(err))
	}

	// changes
	export const deleteWatchlist = id => dispatch => {		
		axios.delete(`./api/watchlists/${id}/`)
			.then(res => {
				dispatch({
					type: DELETE_WATCHLIST,
					payload: id
				})
			})
			.catch(err => console.log(err))
	}
	
	===========================================================================================
	.\django_fin_app\portfolio_management\src\reducers\watchlists.js
	
	// Reducer is nothing but a function which evaluates an action and send down certain state depending on what that action does.

	import { GET_WATCHLISTS,DELETE_WATCHLIST } from '../actions/types.js'		// changes

	const initialState = {
		watchlists: []
	}

	export default function(state = initialState, action) {
		switch(action.type) {
			case GET_WATCHLISTS:
				return {
					...state,
					watchlists: action.payload
				}
			// changes
			case DELETE_WATCHLIST: 
				return {
					...state,
					watchlists: state.watchlists.filter(watchlist => watchlist.id !== action.payload)
				}
			default:
				return state
		}
	}
	
	===========================================================================================
	.\django_fin_app\portfolio_management\src\components\watchlists\Watchlists.js
	
	import React, {Component, Fragment} from 'react'
	import {connect} from 'react-redux'
	import PropTypes from 'prop-types'
	import { getWatchlists,deleteWatchlist } from '../../actions/watchlists'		// changes

	export class Watchlists extends Component {
		static propTypes = {
			watchlists: PropTypes.array.isRequired
		}

		componentDidMount() {
			this.props.getWatchlists()
		}

		render() {
			return (
				<Fragment>
					<h1>Watchlists</h1>
					<table className="table table-striped">
						<thead>
							<tr>
								<th>Name</th>
								<th>Start Date</th>
								<th>End Date</th>
								<th>Amount</th>
								<th></th>
							</tr>
						</thead>
						<tbody>
							{ this.props.watchlists.map( watchlist => (
								<tr key={watchlist.id}>
									<td>{watchlist.watchlist_name}</td>
									<td>{watchlist.start_date}</td>
									<td>{watchlist.end_date}</td>
									<td>{watchlist.investment_amount}</td>
									<td><button onClick={this.props.deleteWatchlist.bind(this, watchlist.id)} 
									className="btn btn-danger btn-sm">Delete</button></td>							// changes
								</tr>
							))}
						</tbody>
					</table>
				</Fragment>
			)
		}
	}

	const mapStateToProps = state => ({
		// any_name: state.(reducer_name_from_root_reducer).(part_of_state)
		watchlists: state.watchlists.watchlists
	})

	export default connect(mapStateToProps, { getWatchlists, deleteWatchlist })(Watchlists)					// changes
	
12. Add watchlist feature.
	Create WatchlistForm component.
	
	.\django_fin_app\portfolio_management\src\components\watchlists\WatchlistForm.js
	
	import React, { Component, Fragment } from 'react'
	import { Watchlists } from './Watchlists'

	export class WatchlistForm extends Component {
	  state = {
		watchlist_name: "",
		start_date: "", 
		end_date: "",
		investment_amount: 0
	  }

	  onChange = e => {
		this.setState({
		  [e.target.name]: e.target.value
		})
	  }

	  onSubmit = e => {
		e.preventDefault()
		console.log("submit")
	  }

	  render() {
		const { watchlist_name, start_date, end_date, investment_amount } = this.state

		return (
		  <Fragment>
			<h1>Add Watchlist</h1>
			<form className="card card-body" onSubmit={this.onSubmit}>
			  <div className="form-row">
				<div className="form-group col-md-3">
				  <label htmlFor="watchlist-name">Watchlist Name</label>
				  <input type="text" className="form-control" name="watchlist_name" id="watchlist-name" placeholder="Name" value={watchlist_name} onChange={this.onChange} />
				</div>
				<div className="form-group col-md-3">
				  <label htmlFor="watchlist-start-date">Start Date</label>
				  <input type="date" className="form-control" name="start_date" id="watchlist-start-date" placeholder="Start Date" value={start_date} onChange={this.onChange} />
				</div>
				<div className="form-group col-md-3">
				  <label htmlFor="watchlist-end-date">End Date</label>
				  <input type="date" className="form-control" name="end_date" id="watchlist-end-date" placeholder="End Date" value={end_date} onChange={this.onChange} />
				</div>
				<div className="form-group col-md-3">
				  <label htmlFor="watchlist-amount">Investment Amount</label>
				  <input type="number" className="form-control" name="investment_amount" id="watchlist-amount" placeholder="Investment Amount" value={investment_amount} onChange={this.onChange} />
				</div>
				<div className="form-group mx-auto mt-3">
				  <button type="submit" className="btn btn-primary btn-lg">
					Submit
				  </button>
				</div>
			  </div>
			</form>
		  </Fragment>
		)
	  }
	}

	export default WatchlistForm
	
	
13. Now add action to add new watchlist using post method.\

	.\django_fin_app\portfolio_management\src\actions\types.js

	export const GET_WATCHLISTS = "GET_WATCHLISTS"

	export const DELETE_WATCHLIST = "DELETE_WATCHLIST"

	export const ADD_WATCHLIST = "ADD_WATCHLIST"											// Changes
	
	===========================================================================================================
	
	.\django_fin_app\portfolio_management\src\actions\watchlists.js
	
	import axios from 'axios'

	import { GET_WATCHLISTS,DELETE_WATCHLIST,ADD_WATCHLIST } from './types.js'				// Changes

	export const getWatchlists = () => dispatch => {
		axios.get('./api/watchlists/')
			.then(res => {
				dispatch({
					type: GET_WATCHLISTS,
					payload: res.data
				})
			})
			.catch(err => console.log(err))
	}

	export const deleteWatchlist = id => dispatch => {
		axios.delete(`./api/watchlists/${id}/`)
			.then(res => {
				dispatch({
					type: DELETE_WATCHLIST,
					payload: id
				})
			})
			.catch(err => console.log(err))
	}

	// Changes
	export const addWatchlist = (watchlist) => dispatch => {
		axios.post('./api/watchlists/', watchlist)
			.then(res => {
				dispatch({
					type: ADD_WATCHLIST,
					payload: res.data
				})
			})
			.catch(err => console.log(err))
	}
	
	===========================================================================================================
	
	.\django_fin_app\portfolio_management\src\reducers\watchlists.js
	
	// Reducer is nothing but a function which evaluates an action and send down certain state depending on what that action does.

	import { GET_WATCHLISTS,DELETE_WATCHLIST,ADD_WATCHLIST } from '../actions/types.js'

	const initialState = {
		watchlists: []
	}

	export default function(state = initialState, action) {
		switch(action.type) {
			case GET_WATCHLISTS:
				return {
					...state,
					watchlists: action.payload
				}
			case DELETE_WATCHLIST: 
				return {
					...state,
					watchlists: state.watchlists.filter(watchlist => watchlist.id !== action.payload)
				}
			case ADD_WATCHLIST:
				return {
					...state,
					watchlists: [...state.watchlists, action.payload]
				}
			default:
				return state
		}
	}
		
	===========================================================================================================
	
	.\django_fin_app\portfolio_management\src\components\watchlists\WatchlistForm.js
	
	import React, { Component, Fragment } from 'react'
	import { connect } from 'react-redux'															// Changes
	import PropTypes from 'prop-types'																// Changes
	import { addWatchlist } from '../../actions/watchlists'											// Changes

	export class WatchlistForm extends Component {
	  state = {
		watchlist_name: "",
		start_date: "", 
		end_date: "",
		investment_amount: 0
	  }

		// Changes
	  static propTypes = {
		addWatchlist: PropTypes.func.isRequired
	  }

	  onChange = e => {
		this.setState({
		  [e.target.name]: e.target.value
		})
	  }

		// Changes
	  onSubmit = e => {
		e.preventDefault()
		const { watchlist_name, start_date, end_date, investment_amount } = this.state
		const watchlist = {watchlist_name, start_date, end_date, investment_amount}
		this.props.addWatchlist(watchlist)
	  }

	  render() {
		const { watchlist_name, start_date, end_date, investment_amount } = this.state

		return (
		  <Fragment>
			<h1>Add Watchlist</h1>
			<form className="card card-body" onSubmit={this.onSubmit}>
			  <div className="form-row">
				<div className="form-group col-md-3">
				  <label htmlFor="watchlist-name">Watchlist Name</label>
				  <input type="text" className="form-control" name="watchlist_name" id="watchlist-name" placeholder="Name" value={watchlist_name} onChange={this.onChange} />
				</div>
				<div className="form-group col-md-3">
				  <label htmlFor="watchlist-start-date">Start Date</label>
				  <input type="date" className="form-control" name="start_date" id="watchlist-start-date" placeholder="Start Date" value={start_date} onChange={this.onChange} />
				</div>
				<div className="form-group col-md-3">
				  <label htmlFor="watchlist-end-date">End Date</label>
				  <input type="date" className="form-control" name="end_date" id="watchlist-end-date" placeholder="End Date" value={end_date} onChange={this.onChange} />
				</div>
				<div className="form-group col-md-3">
				  <label htmlFor="watchlist-amount">Investment Amount</label>
				  <input type="number" className="form-control" name="investment_amount" id="watchlist-amount" placeholder="Investment Amount" value={investment_amount} onChange={this.onChange} />
				</div>
				<div className="form-group mx-auto mt-3">
				  <button type="submit" className="btn btn-primary btn-lg">
					Submit
				  </button>
				</div>
			  </div>
			</form>
		  </Fragment>
		)
	  }
	}

	export default connect(null, { addWatchlist })(WatchlistForm)											// Changes